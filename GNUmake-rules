# -*- Mode: makefile -*-

# rules to compile Jade ntuple code

# Fix PWD:
        PWD = $(shell pwd)

# Location of JADE libraries:
       JADE = /remote/pcl246/skluth/jade/jadesoft
#   JADELIBS = interface jadegs boslib source zlib
   JADELIBS = interface jadegs boslib zlib

# CERNLIB:
   CERNROOT = /cern/pro
    CERNLIB = $(CERNROOT)/lib
   CERNLIBS = kernlib packlib mathlib $(EXTRALIBS)

# Targets of libraries with and without include files:
 LIBZREADOBJS = jadev.o jadepr.o endian.o jzsetr.o jzinit.o jzevnt.o jzfnsh.o
  LIBJADEOBJS = jtevnt.o jtfnsh.o jtinit.o jtsetr.o
LIBNTUPLEOBJS = jtbknt.o jtevsl.o casso.o cinfo.o cnass.o cnone.o cyjet.o \
                qqcone.o qqjets.o caxes.o ckern.o \
                cncnt.o cwrit.o qqangl.o \
                qqevsh.o cdble.o cksord.o cnjet.o cyget.o \
                qqckbk.o qqform.o px116.o

 EXEOBJS = jtjob.o jzread.o

# Main target:
all : jtjob

# Link jtjob application:
jtjob : jtjob.o libjtlib.a libntuple.a
	$(LD) $(LDFLAGS) -o $@ $^ $(JADE)/main/superv/showb.o \
	-L$(JADE)/lib $(patsubst %,-l%,$(JADELIBS)) \
	-L$(CERNLIB) $(patsubst %,-l%,$(CERNLIBS)) >> MAIN.map

# Link ze4v -> ntuple:
jzread : jzread.o libzread.a libntuple.a
	$(LD) $(LDFLAGS) -o $@ $^ \
	-L$(CERNLIB) $(patsubst %,-l%,$(CERNLIBS))

# Link lumi analysis program:
taklumi : taklumi.o
	$(LD) $(LDFLAGS) -o $@ $< \
	-L$(CERNLIB) $(patsubst %,-l%,$(CERNLIBS))

# Libraries depend on temporay .o files:
libjtlib.a : libjtlib.a( $(LIBJADEOBJS) )
libntuple.a : libntuple.a( $(LIBNTUPLEOBJS) )
libzread.a : libzread.a( $(LIBZREADOBJS) )

# Generate a .d dependency make file fragment for each .o in
# the list:
LIBJADEDEPS = $(LIBJADEOBJS:.o=.d)
$(LIBJADEDEPS) : %.d : %.F
	$(GCC) -M $< | $(AWK) '{ sub(":","",$$1); sub(".F.o",".o",$$1); printf "libjtlib.a("$$1"):"; i=1; while( i++<NF) printf " "$$i; printf "\n" }' > $@
-include $(LIBJADEDEPS)
EXEDEPS = $(EXEOBJS:.o=.d) 
$(EXEDEPS) : %.d : %.F
	$(GCC) -M $< | $(AWK) '{ sub(".F.o",".o",$$1); print }' > $@
-include $(EXEDEPS)
jtbknt.d jtevsl.d : %.d : %.F
	$(GCC) -M $< | $(AWK) '{ sub(":","",$$1); sub(".F.o",".o",$$1); printf "libntuple.a("$$1"):"; i=1; while( i++<NF) printf " "$$i; printf "\n" }' > $@
-include jtbknt.d jtevsl.d
LIBZREADDEPS = $(filter-out endian%, $(LIBZREADOBJS:.o=.d) )
$(LIBZREADDEPS) : %.d : %.F
	$(GCC) -M $< | $(AWK) '{ sub(":","",$$1); sub(".F.o",".o",$$1); printf "libzread.a("$$1"):"; i=1; while( i++<NF) printf " "$$i; printf "\n" }' > $@
-include $(LIBZREADDEPS)



# Fortran with and without CPP:
%.o : %.f
	$(FC) $(FFLAGS) -o $@ -c $<
%.o : %.F
	$(FC) $(FFLAGS) -o $@ -c $<

# Clean up:
clean :
	rm -f libjtlib.a libntuple.a libzread.a \
	*.d jtjob jtjob.o jzread jzread.o MAIN.map
